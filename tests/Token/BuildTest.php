<?php namespace Tests\Reply;

use App\Models\ExeOpratorModel;
use App\Models\MemberInterestModel;
use App\Service\Member\Member;
use App\Service\Token\AccessToken;
use Tests\TestCase;

class BuildTest extends TestCase{
    private $cashier;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->cashier = (new ExeOpratorModel())->find(18);
    }


    private function service($expireIn = null, $uniqueKey = null){

        return new AccessToken($expireIn, $uniqueKey);
    }

    public function test_build(){
        $this->assertGreaterThanOrEqual(62, strlen($this->service()->build([
            $this->cashier->mch_id, $this->cashier->store_id , $this->cashier->id
        ])));
    }

    public function test_uniquePool(){
        $service =  $this->service(10, 'test_access_token_unique');

        $service->setAccessToken('test_access_1_1_1');

        $this->assertEquals(1, count($service->getUniquePool()));
    }

    public function test_verifyModel(){
        $service = $this->service();

        $accessToken = $service->build([
            $this->cashier->mch_id, $this->cashier->store_id , $this->cashier->id
        ]);

        $this->assertEquals([
            $this->cashier->mch_id, $this->cashier->store_id , $this->cashier->id
        ], $service->verify($accessToken));
    }

    public function test_verifyCustom(){
        $service = $this->service();

        $accessToken = $service->build([
            2, 22 , 222
        ]);

        $this->assertEquals([
            2, 22 , 222
        ], $service->verify($accessToken));
    }

    public function test_expire(){
        $service = $this->service(1);

        $accessToken = $service->build([
            1,2,3
        ]);

        usleep(1000008);

        try{
            $service->verify($accessToken);

        }catch (\Exception $exception){
            $this->assertEquals('invalid access_token', $exception->getMessage());
        }

    }

}
